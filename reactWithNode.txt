React JS files

//Index.js
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import * as serviceWorker from './serviceWorker';

ReactDOM.render(<App />, document.getElementById('root'));

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: http://bit.ly/CRA-PWA
serviceWorker.unregister();


//App.js
import React, { Component } from "react";
import logo from "./logo.svg";
import "./App.css";
import Dashboard from "./Modules/Dashboard";

class App extends Component {
  constructor() {
    super();
    this.state = {
      name: "",
      id: ""
    };
    this.apiData = this.apiData.bind(this);
  }
  render() {
    return (
      <div className="App">
        <Dashboard name={this.state.name} onApiData={this.apiData} />
      </div>
    );
  }
  apiData(name) {
    this.state.name = name;
    this.setState(this.state);
  }
}

export default App;



//Modules/Dashboard.js

import React, { Component } from "react";
import Course from "./Course";
const axios = require("axios");

class Dashboard extends Component {
  constructor() {
    super();
    this.state = {
      data: {
        cources: [
          { id: 1, name: "cource1" },
          { id: 2, name: "cource2" },
          { id: 3, name: "cource3" },
          { id: 4, name: "cource4" }
        ]
      }
    };
    this.handleOnApiData = this.handleOnApiData.bind(this);
    this.handleChange = this.handleChange.bind(this);
    this.handleDelete = this.handleDelete.bind(this);
  }

  handleDelete = id => {
    let data = {};
    data.cources = this.state.data.cources.filter(course => {
      return course.id !== id;
    });
    this.setState({ data: data });
  };
  render() {
    return (
      <div>
        <h1> Dashboard contents Are here</h1> {this.props.name}
        <input
          type="text"
          name="name"
          value={this.state.name}
          onChange={this.handleChange}
        />
        <div>
          {this.state.data.cources.map(cours => (
            <Course
              key={cours.id}
              course={cours}
              onDelete={this.handleDelete}
            />
          ))}
        </div>
        <button type="button" onClick={this.handleOnApiData}>
          Make Request
        </button>
      </div>
    );
  }

  componentDidMount() {
    axios.get("http://localhost:3001/api/cources").then(response => {
      console.log("response");
      console.log(response);
      this.setState((this.state.data.cources = response.data));
      console.log("this.state.data.cources");
      console.log(this.state.data.cources);
    });
  }
  handleChange(e) {
    this.setState({ name: e.target.value });
    console.log(this.state.name);
  }

  handleOnApiData() {
    console.log(this.state.name);
    this.props.onApiData("Arvind");
  }
}

export default Dashboard;


//Modules/Course.jsx

import React, { Component } from "react";
class Course extends Component {
  state = {};
  render() {
    console.log("course props");
    console.log(this.props);
    return (
      <div>
        <label>{this.props.course.id}</label>
        <label>{this.props.course.name}</label>
        <button
          onClick={() => {
            this.props.onDelete(this.props.course.id);
          }}
        >
          delete
        </button>
      </div>
    );
  }
}

export default Course;


//npm run-script build



//Node JS
index.js

const Joi = require("joi");
const express = require("express");
const app = express();

app.use(express.json());
app.use(express.static("build"));
const cources = [
  { id: 1, name: "cource1" },
  { id: 2, name: "cource2" },
  { id: 3, name: "cource3" },
  { id: 4, name: "cource4" }
];
app.get("/", (req, res) => {
  res.send("index.html");
});

app.get("/api/cources", (req, res) => {
  res.send(cources);
});

// /api/cources/1

app.get("/api/cources/:id", (req, res) => {
  const cource = cources.find(c => c.id === parseInt(req.params.id));
  if (!cource) {
    // 404
    res.status(404).send(`this cource with given ID was not found.`);
    return;
  }
  res.send(cource);
});

app.post("/api/cources", (req, res) => {
  const schema = {
    name: Joi.string()
      .min(3)
      .required()
  };
  const result = Joi.validate(req.body, schema);
  if (result.error) {
    // 400 Bad Request
    res.status(400).send(result.error.details[0].message);
    return;
  }
  const cource = {
    id: cources.length + 1,
    name: req.body.name
  };
  cources.push(cource);
  res.send(cources);
});

app.put("/api/cources/:id", (req, res) => {
  const cource = cources.find(c => c.id === parseInt(req.params.id));
  if (!cource)
    return res.status(404).send(`this cource with given ID was not found.`);

  const { error } = validateCource(req.body);

  if (error) return res.status(400).send(error.details[0].message);

  cource.name = req.body.name;
  res.send(cource);
});

app.delete("/api/cources/:id", (req, res) => {
  const cource = cources.find(c => c.id === parseInt(req.params.id));
  if (!cource)
    return res.status(404).send(`this cource with given ID was not found.`);

  const index = cources.indexOf(cource);
  cources.splice(index, 1);

  res.send(cource);
});

function validateCource(cource) {
  const schema = {
    name: Joi.string()
      .min(3)
      .required()
  };

  return Joi.validate(cource, schema);
}

app.get("/api/posts/:year/:mont", (req, res) => {
  res.send(req.query);
});

// PORT
const port = process.env.PORT || 3001;
app.listen(port, () => console.log(`listening ${port}`));

//nodemon.cmd .\index.js
